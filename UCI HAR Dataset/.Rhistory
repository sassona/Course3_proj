# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fe69ae2da4bbae108fef",
secret = "f013b027e173c7531c8ed3946536862bf47ec864")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=TRUE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=TRUE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
?oauth2.0_token
fileURL<-"https://api.github.com/users/jtleek/repos"
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fe69ae2da4bbae108fef",
secret = "f013b027e173c7531c8ed3946536862bf47ec864")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
github_token<-d7ad959b2efe428ed8cb&state=2P7SANu8Sf
github_token<-"d7ad959b2efe428ed8cb&state=2P7SANu8Sf"
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
GET("https://api.github.com/rate_limit", gtoken)
gtoken\
gtoken
req <- GET("https://api.github.com/rate_limit", gtoken)
github_token<-"code=d7ad959b2efe428ed8cb&state=2P7SANu8Sf"
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
github_token<-"d7ad959b2efe428ed8cb&state=2P7SANu8Sf"
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
library(httr)
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
install.packages("sqldf")
acs<-read.csv(url("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"))
View(acs)
View(acs)
a<-sqldf("select pwgtp1 from acs where AGEP < 50")
b<-sqldf("select * from acs")
c<-sqldf("select pwgtp1 from acs")
d<-sqldf("select * from acs where AGEP < 50 and pwgtp1")
library(sqldf)
a<-sqldf("select pwgtp1 from acs where AGEP < 50")
b<-sqldf("select * from acs")
c<-sqldf("select pwgtp1 from acs")
d<-sqldf("select * from acs where AGEP < 50 and pwgtp1")
View(a)
a<-sqldf("select pwgtp1,AGEP from acs where AGEP < 50")
View(b)
View(c)
View(d)
z<-unique(acs$AGEP)
a<-sqldf("select unique * from acs")
b<-sqldf("select distinct pwgtp1 from acs")
c<-sqldf("select AGEP where unique from acs")
d<-sqldf("select distinct AGEP from acs")
View(d)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
?nchar
nchar(htmlCode[10])
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode = readLines(con)
con = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
htmlCode = read.table(con)
?oauth2.0_token
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fe69ae2da4bbae108fef",
secret = "f013b027e173c7531c8ed3946536862bf47ec864")
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
library(httr)
library(httpuv)
fileURL<-"https://api.github.com/users/jtleek/repos"
# 1. Find OAuth settings for github:
#    http://developer.github.com/v3/oauth/
oauth_endpoints("github")
# 2. To make your own application, register at at
#    https://github.com/settings/applications. Use any URL for the homepage URL
#    (http://github.com is fine) and  http://localhost:1410 as the callback url
#
#    Replace your key and secret below.
myapp <- oauth_app("github",
key = "fe69ae2da4bbae108fef",
secret = "f013b027e173c7531c8ed3946536862bf47ec864")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache=FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
head(req)
req
req
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
head(content(req))
c<-data.frame(content(req))
c
content(req)
?content
headers(req)
content(req)
a<-content(req)
a[1]
a
a[[1]
a[[1]]
a<-content(req)
a
req <- GET("https://api.github.com/users/jtleek/repos/datasharing", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos/datasharing/", gtoken)
stop_for_status(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
a<-content(req)
a[[1]]
a[[2]]
a[[3]]
a[[4]]
a[[5]]
a[[6]]
a[[7]]
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
a<-read.csv(url)
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
a<-read.csv(url1)
dim(a)
library(dplyr)
install.packages("dplyr")
library(dplyr)
mutate(a,agricultureLogical=(ACR==3 & AGS ==6)
mutate(a,agricultureLogical=(ACR==3 & AGS ==6))
which(agricultureLogical)
which(agricultureLogical=TRUE)
which(agricultureLogical==TRUE)
a.which(agricultureLogical==TRUE)
?which
b<-a$agricultureLogical
View(a)
mutate(a,agricultureLogical=(ACR==3 & AGS ==6))
b<-mutate(a,agricultureLogical=(ACR==3 & AGS ==6))
c<-b$agricultureLogical
which(agricultureLogical)
which(b=TRUE)
which(b==TRUE)
head(which(b==TRUE))
head(which(c==TRUE))
install.packages("jpeg")
library(jpeg)
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
a<-readJPEG(url1,native=TRUE)
library(jpeg)
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
a<-readJPEG(url1,native=TRUE)
quantile(a,probs = seq(0,0.3,0.8,1))
library(jpeg)
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
a<-readJPEG(url1,native=TRUE)
quantile(a,probs = seq(0,0.3,0.8,1))
a<-readJPEG(url1)
?readJPEG
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
z <- tempfile()
download.file(url1,z,mode="wb")
a<-readJPEG(z)
quantile(a,probs = seq(0,0.3,0.8,1))
quantile(a,0.3)
quantile(a,0.8)
download.file(url1,z,mode="wb")
a<-readJPEG(z,native=TRUE)
quantile(a,0.3)
quantile(a,0.8)
library(dplyr)
url1<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url2<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
a<-read.csv(url1)
b<-read.csv(url2)
View(a)
View(b)
a2<-a[5:330,]
View(a2)
?inner_join
?merge
c<-merge(a2,y,by.x="X",by.y="CountryCode")
c<-merge(a2,b,by.x="X",by.y="CountryCode")
View(c)
View(c)
c<-merge(a2,b,by.x="X",by.y="CountryCode",all=FALSE)
c<-merge(a2,b,by.x="X",by.y="CountryCode",all=TRUE)
c<-merge(a2,b,by.x="X",by.y="CountryCode",all=FALSE)
d<-merge(b,a2,by.x="CountryCode",by.y="X")
View(d)
a2<-a[5:236,]
c<-merge(a2,b,by.x="X",by.y="CountryCode")
d<-merge(b,a2,by.x="CountryCode",by.y="X")
a2<-a[5:235,]
c<-merge(a2,b,by.x="X",by.y="CountryCode")
d<-merge(b,a2,by.x="CountryCode",by.y="X")
a<-read.csv(url1)
b<-read.csv(url2)
View(a)
c<-merge(a,b,by.x="X",by.y="CountryCode")
View(c)
View(b)
fg<-read.csv(url1)
a2<-fg[!((fg$Gross.domestic.product.2012 == "") |  is.na(fg$Gross.domestic.product.2012)) ,]
dim(a2)
View(a2)
c<-merge(a,b,by.x="X",by.y="CountryCode")
a2<-fg[!((fg$Gross.domestic.product.2012 == "") |  is.na(fg$Gross.domestic.product.2012))|!((fg$X == "") ,]
a2<-fg[!((fg$Gross.domestic.product.2012 == "") |  is.na(fg$Gross.domestic.product.2012)|!(fg$X == "")) ,]
a2<-fg[!((fg$Gross.domestic.product.2012 == "") |  is.na(fg$Gross.domestic.product.2012)|(fg$X != "")) ,]
a2<-fg[!((fg$Gross.domestic.product.2012 == "") |  is.na(fg$Gross.domestic.product.2012)|(fg$X == "")) ,]
a2<-fg[!((fg$Gross.domestic.product.2012 == "") |  is.na(fg$Gross.domestic.product.2012)|(fg$X != "")) ,]
c<-merge(a2,b,by.x="X",by.y="CountryCode")
a2<-fg[!((fg$Gross.domestic.product.2012 == "") |  is.na(fg$Gross.domestic.product.2012)|(fg$X == "")) ,]
c<-merge(a2,b,by.x="X",by.y="CountryCode")
merged_df <- arrange(c,desc(as.numeric(as.character(rank))))
View(c)
merged_df <- arrange(c,desc(as.numeric(as.character(X.3))))
View(merged_df)
merged_df <- arrange(c,desc(as.numeric(as.character(Gross.domestic.product.2012))))
merged_df <- arrange(c,desc(as.numeric(as.character(Gross.domestic.product.2012))))
View(merged_df)
group_by(merged_df,Income.Group)
mdf<-group_by(merged_df,Income.Group)
View(mdf)
group_by(merged,Income.Group) %>%  summarize(GDP2012=mean(Gross.domestic.product.2012))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(Gross.domestic.product.2012))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(Gross.domestic.product.2012,na.rm=TRUE))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(Gross.domestic.product.2012,rm.na=TRUE))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(Gross.domestic.product.2012,na.rm=TRUE))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(Gross.domestic.product.2012),na.rm=TRUE)
group_by(merged_df,Income.Group) %>%  summarise(GDP2012=mean(Gross.domestic.product.2012,na.rm=TRUE))
group_by(merged_df,Income.Group) %>%  summarise(Gross.domestic.product.2012,GDP2012=mean(Gross.domestic.product.2012,na.rm=TRUE))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(Gross.domestic.product.2012,na.rm=TRUE))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012),na.rm=TRUE))
View(merged_df)
View(fg)
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
?table
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=sum(as.numeric(Gross.domestic.product.2012)))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
group_by(c,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
group_by(a2,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
group_by(c,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
table(merged_df)
table(merged_df,Income.Group)
with(merged_df,table(Income.Group,Gross.domestic.product.2012))
with(merged_df,table(Income.Group))
group_by(c,Income.Group) %>%  summarize(GDP2012=sum(as.numeric(Gross.domestic.product.2012)))
group_by(merged_df,Income.Group) %>%  summarize(GDP2012=sum(as.numeric(Gross.domestic.product.2012)))
View(fg)
View(a2)
View(merged_df)
d<-merged_df[c("X","Gross.domestic.product.2012","Income.Group")]
View(d)
group_by(d,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
library(plyr); library(dplyr)
detach(package:dplyr)
detach(package:plyr)
library(plyr); library(dplyr)
group_by(d,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
d<-merged_df[c("X","Gross.domestic.product.2012","Income.Group"),c("High income: nonOECD","High income: OECD")]
d<-merged_df[c("X","Gross.domestic.product.2012","Income.Group"),Income.Group=c("High income: nonOECD","High income: OECD")]
d<-merged_df[c("X","Gross.domestic.product.2012","Income.Group"),]
d
table(d)
group_by(d,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012,na.rm=TRUE)))
group_by(d,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012,rm.na=TRUE)))
group_by(d,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
d<-merged_df[c("X","Gross.domestic.product.2012","Income.Group"),]
group_by(d,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
d<-merged_df[c("X","Gross.domestic.product.2012","Income.Group"),]
d<-merged_df[c("X","Gross.domestic.product.2012","Income.Group"),]
d
d<-merged_df[,c("X","Gross.domestic.product.2012","Income.Group")]
d<-merged_df[c("High income: nonOECD"),c("X","Gross.domestic.product.2012","Income.Group")]
d
d<-merged_df[,c("X","Gross.domestic.product.2012","Income.Group")]
d<-merged_df[,c("X","Gross.domestic.product.2012","Income.Group")]
d
mean(d$Income.Group="High income: OECD")
mean(d$Income.Group=="High income: OECD")
mean(d$Income.Group=="High income: OECD",2)
mean(d$Income.Group=="High income: OECD",3)
d(d$Income.Group=="High income: OECD",)
d[d$Income.Group=="High income: OECD",]
d[d$Income.Group=="High income: OECD",2]
mean(d[d$Income.Group=="High income: OECD",2])
mean(d[d$Income.Group=="High income: OECD",2],rm.na=TRUE)
mean(as.numeric(d[d$Income.Group=="High income: OECD",2]),rm.na=TRUE)
mean(as.numeric(d[d$Income.Group=="High income: nonOECD",2]),rm.na=TRUE)
mean(as.numeric(d[d$Income.Group=="High income: nonOECD",4]),rm.na=TRUE)
mean(as.numeric(d[d$Income.Group=="High income: nonOECD",2]),rm.na=TRUE)
group_by(d,Income.Group) %>%  summarize(GDP2012=mean(as.numeric(Gross.domestic.product.2012)))
temp$quartile <- with(d, cut(d$Gross.domestic.product.2012, breaks=quantile(d$Gross.domestic.product.2012, probs=seq(0,1, by=0.2)), include.lowest=TRUE))
temp$quartile <- with(d, cut(as.numeric(d$Gross.domestic.product.2012), breaks=quantile(as.numeric(d$Gross.domestic.product.2012), probs=seq(0,1, by=0.2)), include.lowest=TRUE))
cut2(as.numeric(d$Gross.domestic.product.2012),g=5)
setwd("C:/Users/sassona/Bioinfo/datasciencecoursera/course3_proj1")
test<-"UCI HAR Dataset/"
ls()
features<-read.table('features.txt')
activity_labels<-read.table('activity_labels.txt')
train_set<-read.table('train/X_train.txt')
train_labels<-read.table('train/y_train.txt')
test_set<-read.table('test/X_train.txt')
test_labels<-read.table('test/y_train.txt')
train_subject<- read.table('train/subject_train.txt')
train_signal_totalAcc<- read.table('train/Inertial Signals/total_acc_x_train.txt')
train_signal_bodyAcc<- read.table('train/Inertial Signals/body_acc_x_train.txt')
train_signal_bodyGyro<- read.table('train/Inertial Signals/body_gyro_x_train.txt')
test_subject<- read.table('test/subject_train.txt')
test_signal_totalAcc<- read.table('test/Inertial Signals/total_acc_x_train.txt')
test_signal_bodyAcc<- read.table('test/Inertial Signals/body_acc_x_train.txt')
test_signal_bodyGyro<- read.table('test/Inertial Signals/body_gyro_x_train.txt')
setwd("C:/Users/sassona/Bioinfo/datasciencecoursera/course3_proj1/UCI HAR Dataset")
features<-read.table('features.txt')
activity_labels<-read.table('activity_labels.txt')
train_set<-read.table('train/X_train.txt')
train_labels<-read.table('train/y_train.txt')
test_set<-read.table('test/X_train.txt')
test_labels<-read.table('test/y_train.txt')
test_set<-read.table('test/X_test.txt')
test_labels<-read.table('test/y_test.txt')
View(activity_labels)
View(features)
View(test_labels)
View(test_set)
train_subject<- read.table('train/subject_train.txt')
train_signal_totalAcc<- read.table('train/Inertial Signals/total_acc_x_train.txt')
train_signal_bodyAcc<- read.table('train/Inertial Signals/body_acc_x_train.txt')
train_signal_bodyGyro<- read.table('train/Inertial Signals/body_gyro_x_train.txt')
test_subject<- read.table('test/subject_train.txt')
test_signal_totalAcc<- read.table('test/Inertial Signals/total_acc_x_train.txt')
test_signal_bodyAcc<- read.table('test/Inertial Signals/body_acc_x_train.txt')
test_signal_bodyGyro<- read.table('test/Inertial Signals/body_gyro_x_train.txt')
test_signal_totalAcc<- read.table('test/Inertial Signals/total_acc_x_test.txt')
test_signal_bodyAcc<- read.table('test/Inertial Signals/body_acc_x_test.txt')
test_signal_bodyGyro<- read.table('test/Inertial Signals/body_gyro_x_test.txt')
View(test_signal_bodyAcc)
features<-read.table('features.txt')
activity_labels<-read.table('activity_labels.txt')
train_set<-read.table('train/X_train.txt')
train_labels<-read.table('train/y_train.txt')
test_set<-read.table('test/X_test.txt')
test_labels<-read.table('test/y_test.txt')
train_subject<- read.table('train/subject_train.txt')
View(train_labels)
View(train_set)
train_set_comb<-cbind(train_labels,train_set)
View(train_set_comb)
train_set_comb<-cbind(train_labels,train_set)
train_set_comb<-cbind(train_labels,train_set)
View(train_set)
View(train_set_comb)
train_set_comb<-cbind(train_labels,train_set)
test_set_comb<-cbind(test_labels,test_set)
final_comb_full<-rbind(train_set_comb,test_set_comb)
View(final_comb_full)
tail(final_comb_full)
tail(final_comb_full[,1:3])
clear
View(activity_labels)
View(features)
feature_subset<-features[grep("mean", features[,2]), ]
View(feature_subset)
?grep
feature_subset<-features[grep("mean|std", features[,2]), ]
feature_subset<-features[grep("mean()|std()", features[,2]), ]
feature_subset<-features[grep("mean()|std()", features[,2]), ]
feature_subset<-features[grep("mean\(\)|std\(\)", features[,2]), ]
feature_subset<-features[grep("mean()|std/(/)", features[,2]), ]
feature_subset<-features[grep("mean/(/)|std/(/)", features[,2]), ]
feature_subset<-features[grep("mean()|std()", features[,2]), ]
feature_subset<-features[grep("mean\(\)|std\(\)", features[,2],perl=TRUE), ]
feature_subset<-features[grep("mean()|std()", features[,2]), ]
View(feature_subset)
feature_subset<-features[grep("mean()|std()", features[,2],fixed = TRUE), ]
feature_subset<-features[grep("mean|std", features[,2],fixed = TRUE), ]
feature_subset<-features[grep("mean()", features[,2],fixed = TRUE,fixed=TRUE), ]
feature_subset<-features[grep("mean()", features[,2],fixed = TRUE), ]
feature_subset<-rbind(features[grep("std()", features[,2],fixed = TRUE), ]
)
feature_subset<-rbind(feature_subset,features[grep("std()", features[,2],fixed = TRUE), ]
feature_subset<-features[grep("mean()", features[,2],fixed = TRUE), ]
feature_subset<-rbind(feature_subset,features[grep("std()", features[,2],fixed = TRUE), ]
feature_subset<-features[grep("mean()", features[,2],fixed = TRUE), ]
feature_subset<-rbind(feature_subset,features[grep("std()", features[,2],fixed = TRUE), ])
View(feature_subset)
View(final_comb_full)
activity_labels<-read.table('activity_labels.txt')
train_subject<-read.table('train/subject_train.txt')
train_set<-read.table('train/X_train.txt')
train_labels<-read.table('train/y_train.txt')
test_set<-read.table('test/X_test.txt')
test_labels<-read.table('test/y_test.txt')
test_subject<- read.table('test/subject_test.txt')
View(test_subject)
train_set_comb<-cbind(train_subject,train_labels,train_set)
test_set_comb<-cbind(test_subject,test_labels,test_set)
final_comb_full<-rbind(train_set_comb,test_set_comb)
View(final_comb_full)
View(test_subject)
View(train_subject)
feature_subset$transform <- feature_subset$V1 + 2
?sort
sort(feature_subset)
sort(feature_subset,c(3))
sort(feature_subset,c(3))
feature_subset[order(feature_subset$transform)]
feature_subset[order(feature_subset$transform),]
feature_subset<-feature_subset[order(feature_subset$transform),]
final_comb_mean_std_subset<-final_comb_full[,c(1,2,feature_subset$transform)]
View(final_comb_mean_std_subset)
View(activity_labels)
library(dplyr)
View(activity_labels)
?left_join
hold<-left_join(final_comb_mean_std_subset,activity_labels,by=V1.1)
hold<-left_join(final_comb_mean_std_subset,activity_labels,by=c("V1.1" ="V2"))
transform(final_comb_mean_std_subset, V1.1 = as.numeric(V1.1))
hold<-left_join(final_comb_mean_std_subset,activity_labels,by=c("V1.1" ="V2"))
sapply(final_comb_mean_std_subset,mode)
sapply(activity_labels,mode)
hold<-left_join(final_comb_mean_std_subset,activity_labels,by=c("V1.1" ="V2"))
hold<-left_join(final_comb_mean_std_subset,activity_labels,by=c("V1.1" ="V1"))
View(hold)
hold[,V1.1]<-hold[,V2.y]
hold[,c("V1.1")]<-hold[,c("V2.y")]
final_comb_mean_std_subset<-hold[,1:68]
hold<-final_comb_mean_std_subset
colnames(hold)<-c("Subject","Activity",feature_subset$V2)
a<-c("Subject","Activity",feature_subset$V2)
a
a<-c("Subject","Activity",feature_subset$V1)
a
a<-c("Subject","Activity",feature_subset$V3)
a
a<-c("Subject","Activity",feature_subset$transform)
a
a<-feature_subset$V2
a
a<-as.character(feature_subset$V2)
a
a<-c("Subject","Activity",as.character(feature_subset$V2))
a
colnames(hold)<-c("Subject","Activity",as.character(feature_subset$V2))
colnames(final_comb_mean_std_subset)<-c("Subject","Activity",as.character(feature_subset$V2))
groups(group_by(final_comb_mean_std_subset,Subject,Activity))
grouped_data<-group_by(final_comb_mean_std_subset,Subject,Activity)
summerize(grouped_data, n=mean(n))
feature_subset$transform <- feature_subset$V1 + 2
View(grouped_data)
grouped_data<-group_by(final_comb_mean_std_subset,Subject,Activity)
library(dplyr)
data_summary <- final_comb_mean_std_subset %>%
group_by(Subject,Activity) %>%
summarise_each(funs(mean))
View(data_summary)
source('C:/Users/sassona/Bioinfo/datasciencecoursera/course3_proj1/UCI HAR Dataset/run_analysis.R')
run_analysis()
View(run_analysis)
dataFolder="UCI HAR Dataset"
library(dplyr)
features<-read.table(paste(dataFolder,'features.txt')
features<-read.table(paste(dataFolder,'features.txt'))
features<-read.table(paste(dataFolder, "\",'features.txt'))
features<-read.table(paste(dataFolder, '\','features.txt'))
features<-read.table(paste(dataFolder, '/','features.txt'))
features<-read.table(paste(dataFolder, '\','features.txt',collapse))
features<-read.table(paste(dataFolder, '\','features.txt',sep = ""))
features<-read.table(paste(dataFolder, '/','features.txt',sep = ""))
